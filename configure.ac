# 
# $Id$
#
# This configure build file indicates what libraries and includes
# exist on the system and generates the required code for to
# be able to correctly configure the libwcl library
#
# A good reference for macros for this config file is at:
# http://sourceware.org/autobook/autobook/autobook_283.html

AC_PREREQ(2.50)

# Initialise the system
AC_INIT(wcl, 0.0.0, wcl@wcl.levels.unisa.edu.au)

# Define where autogenerated build files such as 'missing'
# should be located. This is also the location of any additional
# m4 macros that are required
AC_CONFIG_AUX_DIR(cfg)

#
# Init Automake subsystem
#
AM_INIT_AUTOMAKE(wcl,0.0.0)
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

AM_CONFIG_HEADER(config.h)

# Init LIBToolize
AC_CONFIG_MACRO_DIR([cfg])
LT_INIT()

# tell autoconf that we are using CPP libraries
AC_LANG([C++])

#
# Setup Options
#
#####################################

AM_MAINTAINER_MODE([enable])

#
# Configure options
#
#####################################

#
# TCP/UDP Networking
#    When enabled: enable_network is defined to 'yes' or 'no'
#
AC_ARG_ENABLE(network, AC_HELP_STRING([--enable-network], [Enable basic TCP/UDP C++ Code]), , enable_network="no")

#
# Firewire/1394 Camera Support 
# 	When enabled: enable_camera_1394 is defined to 'yes' or 'no'
#
AC_ARG_ENABLE(camera-1394, AC_HELP_STRING([--enable-camera-1394], [Enable 1394/Firewire Camera Support]), enable_camera_1394="yes" , enable_camera_1394="no")

#
# UVC Camera Support 
#
AC_ARG_ENABLE(camera-uvc, AC_HELP_STRING([--enable-camera-uvc], [Enable UVC Camera Support]), enable_camera_uvc="yes" , enable_camera_uvc="no")

# Support for Virtual Camera
#
AC_ARG_ENABLE(camera-virtual, AC_HELP_STRING([--enable-camera-virtual], [Enable Virutal Camera Support]), enable_camera_virtual="yes" , enable_camera_virtual="no")

#
# Gesture recognition support
#
AC_ARG_ENABLE(gestures, AC_HELP_STRING([--enable-gestures], [Enable Gesture Recognition Support]), enable_gestures="yes" , enable_gestures="no")

#
# Support for Vicon system
#
AC_ARG_ENABLE(vicon, AC_HELP_STRING([--enable-vicon], [Enable Vicon System support]), enable_vicon="yes" , enable_vicon="no")

#
# Support for Geometry 
#
AC_ARG_ENABLE(geometry, AC_HELP_STRING([--enable-geometry], [Enable geometry classes]), enable_geometry="yes" , enable_geometry="no")

#
# Support for Raw ports
#
AC_ARG_ENABLE(rawports, AC_HELP_STRING([--enable-rawports], [Enable Raw ports support - serial/parallel]), enable_rawports="yes" , enable_rawports="no")

# Support for X11
#
AC_ARG_ENABLE(x11, AC_HELP_STRING([--enable-x11], [Enable X11 Support]), enable_x11="yes" , enable_x11="no")

# Support for parsers
#
AC_ARG_ENABLE(parsers, AC_HELP_STRING([--enable-parsers], [Enable FileParser Support]), enable_parsers="yes" , enable_parsers="no")


# Support for ARToolkitPlus Tracking
#
AC_ARG_ENABLE(tracker-artoolkitplus, AC_HELP_STRING([--enable-tracker-artoolkitplus], [Enable ARToolKitPlus Tracking]), enable_tracking_artoolkitplus="yes" , enable_tracking_artoolkitplus="no")

# Support for Videos
#
AC_ARG_ENABLE(video, AC_HELP_STRING([--enable-parsers], [Enable Video Encoding/Decoding Support]), enable_video="yes" , enable_video="no")

# Enable Examples
#
AC_ARG_ENABLE(examples, AC_HELP_STRING([--enable-examples], [Enable Relevant Examples for select options]), enable_examples="yes" , enable_examples="no")

# 
#  Enable All Options
# 	This simply enables each option
AC_ARG_ENABLE(all, AC_HELP_STRING([--enable-all], [Enable Support For Everything]), 
	     enable_network="yes";
	     enable_camera_1394="yes";
	     enable_rawports="yes" ;
	     enable_camera_uvc="yes";
	     enable_gestures="yes";
	     enable_vicon="yes";
	     enable_geometry="yes";
	     enable_x11="yes";
	     enable_parsers="yes";
	     enable_camera_virtual="yes";
	     enable_tracking_artoolkitplus="yes";
	     enable_video="yes";
	     enable_examples="yes";
	     )

#
#  Check to see if anything is configured
#
AC_MSG_CHECKING([Checking we need to build something]);
if test "x$enable_network" = "xno" && \
   test "x$enable_camera_1394" = "xno" && \
   test "x$enable_vicon" = "xno" && \
   test "x$enable_osg" = "xno" && \
   test "x$enable_geometry" = "xno" && \
   test "x$enable_gestures" = "xno" && \
   test "x$enable_rawports" = "xno" && \ 
   test "x$enable_camera_uvc" = "xno" && \
   test "x$enable_x11" = "xno" && \
   test "x$enable_camera_virtual" = "xno" && \
   test "x$enable_tracking_artoolkitplus" = "xno" && \
   test "x$enable_parsers" = "xno" && \
   test "x$enable_video" = "xno" ; then
   AC_MSG_RESULT([nup])
   AC_MSG_ERROR([You must select something to build!, use --help for details])
fi
AC_MSG_RESULT([yes])


#
# Automatically turn on network if we are building the vicon module.
#
if test "x$enable_vicon" = "xyes"; then
	enable_network="yes";
	echo "*** Vicon Module selected, automatically enabling Network ***";
fi

#
# Auto turn on the common camera support if any camera option is enabled
#
if test "x$enable_camera_uvc" = "xyes" || \
   test "x$enable_camera_1394" = "xyes" ||
   test "x$enable_camera_virtual" = "xyes"; then
	enable_camera="yes";
fi


#
# System Checks
#
#######################################

#
# The vicon system ignorantly assumes that data is in Intel format (little endian)
# meaning we can't use network byte order. Therefore, we treat things differently
# if we're on PowerPC
#
AC_LANG_PUSH([C])
AC_C_BIGENDIAN
AC_LANG_POP()


#
# Add required hacks to make automake work
# (defined in cfg/other.m4)
WCL_HACKS
WCL_FRIDGE_CHECK

#
# Check for programs
#
#######################################

AC_CHECK_PROG(SED,sed,sed,AC_MSG_ERROR([You Must install sed]))

#
# Test for Package Config
# We need this for a lot of packages
#
AC_PATH_PROG(PKG_CONFIG, pkg-config)
if test "x$PKG_CONFIG" = "x"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi

AC_MSG_CHECKING([for pkg-config library dir])
PKGCONFIG_LIBDIR="`echo $PKG_CONFIG | $SED -e 's~/bin/pkg-config$~~'`/lib/pkgconfig"
AC_MSG_RESULT($PKGCONFIG_LIBDIR)

#
# Need the C++ Compiler, Installer and ranlib to strip libraries
#
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
if test "x$enable_parsers" = "xyes"; then
	AC_PROG_YACC
	AC_PROG_LEX
	if "$LEX" = ":"; then
		AC_MSG_ERROR([Could not find lex. (F)Lex and yacc must be intalled to build parsers])
	fi
fi
AC_PROG_LIBTOOL

#
# Platform specific setup
#
#############################
AC_CANONICAL_HOST
WCL_PLATFORM_SETUP

#
# Check for libraries
#
#############################
if test "x$enable_camera_1394" = "xyes"; then
    if test "x$platform_linux" = "xyes"; then
	PKG_CHECK_MODULES(LIBRAW1394, libraw1394 >= 1.0.0)
	PKG_CHECK_MODULES(LIBDC1394, libdc1394-2 >= 2.0.2)
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBRAW1394_LIBS $LIBDC1394_LIBS"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBRAW1394_CFLAGS"
    elif test "x$platform_osx" = "xyes"; then
	PKG_CHECK_MODULES(LIBDC1394, libdc1394-2 >= 2.0.2)
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBDC1394_LIBS '-framework Carbon' '-framework QuickTime' '-framework AppKit' '-framework IOKit' '-framework Foundation' -lobjc"
    else
	AC_MSG_ERROR([Camera Support Is Not Available on your platform])
    fi
fi

if test "x$enable_video" = "xyes"; then
	PKG_CHECK_MODULES(LIBAVCODEC,libavcodec);
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBAVCODEC_LIBS"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBAVCODEC_CFLAGS"
	PKG_CHECK_MODULES(LIBAVFORMAT,libavformat);
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBAVFORMAT_LIBS"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBAVFORMAT_CFLAGS"
	PKG_CHECK_MODULES(LIBSWSCALE,libswscale);
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBSWSCALE_LIBS"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBSWSCALE_CFLAGS"
	AC_DEFINE(ENABLE_VIDEO, 1, [Enable VideoDecoding/Encoding Support])
fi
	
if test "x$enable_tracking_artoolkitplus" = "xyes"; then
AC_CHECK_HEADERS([ARToolKitPlus/ARToolKitPlus.h],,
	     AC_MSG_ERROR([You Need to Install ARToolKitPlus. Under ubuntu add
			deb http://ppa.launchpad.net/michael-the-drummer/wcl/ubuntu lucid main
			to your sources and to a apt-get update; apt-get install artoolkitplus-dev])
	    )

	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS -lARToolkitPlus"
fi

if test "x$enable_x11" = "xyes"; then
    PKG_CHECK_MODULES(X11, x11 xext )
    PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $X11_LIBS"
    PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $X11_CFLAGS"
fi



# 
# If examples are enabled we need to check for other options
#
EXAMPLE_LIBS=
EXAMPLE_INCLUDES=

if test "x$enable_examples" = "xyes" ; then
	if test "x$enable_tracker_artoolkitplus" = "xyes" ||
	   test "x$enable_video" = "xyes" ||
	   test "x$enable_camera" = "xyes"; then
	        PKG_CHECK_MODULES(GL,gl glu);
		EXAMPLE_LIBS="$GL_LIBS"
		EXAMPLE_INCLUDES="$GL_CFLAGS"

		# These also need glut which isn't pkg-config supported
		# XXX Really need a test for glut -benjsc 20100802
		EXAMPLE_LIBS="$EXAMPLE_LIBS -lglut"

		# Many camera examples require the virtual camera so we enable that here as well
		if test "x$enable_camera" = "xyes"; then
			enable_camera_virtual="yes"
		fi
	fi
	if test "x$enable_gestures" = "xyes" ; then
		PKG_CHECK_MODULES(QT, QtGui);
		EXAMPLE_LIBS="$EXAMPLE_LIBS $QT_LIBS"
		EXAMPLE_INCLUDES="$EXAMPLE_INCLUDES $QT_CFLAGS"

	fi
fi


AC_DEFINE([TOL], [0.00001f], [tolerance for comparing floating point numbers])
if test "x$enable_camera_uvc" = "xyes" ; then
AC_DEFINE(ENABLE_CAMERA_UVC, 1, [Enable UVC Camera Camera Support])
fi
if test "x$enable_camera_1394" = "xyes" ; then
AC_DEFINE(ENABLE_CAMERA_DC1394, 1, [Enable IEEE1394 Camera Support])
fi
if test "x$enable_camera_virtual" = "xyes" ; then
AC_DEFINE(ENABLE_CAMERA_VIRTUAL, 1, [Enable Virtual Camera Support])
fi

#
# Checks for typedefs, structures, and compiler characteristics.
#
#############################
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

#
# Checks for library functions.
#
##############################
AC_FUNC_MALLOC
AC_CHECK_FUNCS([memset])

#
# Indicate what will be built into libwcl, 
# Crash out if nothing is defined
#
###############################
echo "-------------------------------"
echo "libwcl Configuration Summary "
echo "-----------------------------"
echo "network support               : $enable_network"
echo "1394 (Firewire) Camera        : $enable_camera_1394"
echo "Gesture recognition           : $enable_gestures"
echo "Geometry classes              : $enable_geometry"
echo "Vicon MoCap Support           : $enable_vicon"
echo "X11 Support                   : $enable_x11"
echo "Rawports Support(com/lpt)     : $enable_rawports"
echo "UVC Camera support            : $enable_camera_uvc"
echo "Parser Support                : $enable_parsers"
echo "Virtual Camera Support        : $enable_camera_virtual"
echo "ARToolkitPlus Tracker Support : $enable_tracking_artoolkitplus"
echo "Video Encoder/Decoder Support : $enable_video"
echo "Examples Compiled             : $enable_examples"
echo "Maths Support                 : Enabled (default)"
echo "-------------------------------------------------"

#
# Tell automake to substitute the values for 
# package config

AC_SUBST(PKGCONFIG_OTHERLIBS)
AC_SUBST(PKGCONFIG_OTHERINCLUDES)
AC_SUBST(PKGCONFIG_LIBDIR)
AC_SUBST(EXAMPLE_LIBS)
AC_SUBST(EXAMPLE_INCLUDES)

#
# Automake Substitution Variables
#

AM_CONDITIONAL(ENABLE_NETWORK, test "x$enable_network" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA, test "x$enable_camera" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA_VIRTUAL, test "x$enable_camera_virtual" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA_1394, test "x$enable_camera_1394" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA_UVC, test "x$enable_camera_uvc" = "xyes")
AM_CONDITIONAL(ENABLE_GESTURES, test "x$enable_gestures" = "xyes")
AM_CONDITIONAL(ENABLE_VICON, test "x$enable_vicon" = "xyes")
AM_CONDITIONAL(ENABLE_GEOMETRY, test "x$enable_geometry" = "xyes")
AM_CONDITIONAL(ENABLE_RAWPORTS, test "x$enable_rawports" = "xyes")
AM_CONDITIONAL(ENABLE_X11, test "x$enable_x11" = "xyes")
AM_CONDITIONAL(ENABLE_PARSERS, test "x$enable_parsers" = "xyes")
AM_CONDITIONAL(ENABLE_TRACKING_ARTOOLKITPLUS, test "x$enable_tracking_artoolkitplus" = "xyes")
AM_CONDITIONAL(ENABLE_VIDEO, test "x$enable_video" = "xyes")
AM_CONDITIONAL(ENABLE_EXAMPLES, test "x$enable_examples" = "xyes")

#
# Files to create
#
##############################
AC_CONFIG_FILES([Makefile
		 src/Makefile
                 src/wcl/Makefile
		 examples/Makefile
		 examples/artoolkitplus/Makefile
	       	 examples/camera/Makefile
	         examples/gestures/Makefile
		 examples/network/Makefile
		 examples/parallel/Makefile
	       	 examples/parsers/Makefile
	         examples/polhemus/Makefile
		 examples/serial/Makefile
	       	 examples/vicon/Makefile
	         examples/video/Makefile
		 libwcl.pc
		])

#
# Build the configure file
#
###########################
AC_OUTPUT
