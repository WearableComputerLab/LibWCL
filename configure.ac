# 
# $Id$
#
# This configure build file indicates what libraries and includes
# exist on the system and generates the required code for to
# be able to correctly configure the libwcl library
#
# A good reference for macros for this config file is at:
# http://sourceware.org/autobook/autobook/autobook_283.html

AC_PREREQ(2.50)

# Initialise the system
AC_INIT(wcl, 0.0.0, wcl@wcl.ml.unisa.edu.au)

# Define where autogenerated build files such as 'missing'
# should be located. This is also the location of any additional
# m4 macros that are required
AC_CONFIG_AUX_DIR(cfg)

#
# Init Automake subsystem
#
AM_INIT_AUTOMAKE(wcl,0.0.0)
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

AM_CONFIG_HEADER(config.h)

# Init LIBToolize
AC_CONFIG_MACRO_DIR([cfg])
LT_INIT()

# tell autoconf that we are using CPP libraries
AC_LANG([C++])

ERRORS="Configure Error Summary:\n\n"

#
# Setup Options
#
#####################################

AM_MAINTAINER_MODE([enable])


#
# System Checks
#
#######################################

#
# The vicon system ignorantly assumes that data is in Intel format (little endian)
# meaning we can't use network byte order. Therefore, we treat things differently
# if we're on PowerPC
#
AC_LANG_PUSH([C])
AC_C_BIGENDIAN
AC_LANG_POP()


#
# Add required hacks to make automake work
# (defined in cfg/other.m4)
WCL_HACKS
WCL_FRIDGE_CHECK

#
# Check for programs
#
#######################################

AC_CHECK_PROG(SED,sed,sed,AC_MSG_ERROR([You Must install sed]))

#
# Test for Package Config
# We need this for a lot of packages
#
AC_PATH_PROG(PKG_CONFIG, pkg-config)
if test "x$PKG_CONFIG" = "x"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi

AC_MSG_CHECKING([for pkg-config library dir])
PKGCONFIG_LIBDIR="`echo $PKG_CONFIG | $SED -e 's~/bin/pkg-config$~~'`/lib/pkgconfig"
AC_MSG_RESULT($PKGCONFIG_LIBDIR)

#
# Need the C++ Compiler, Installer and ranlib to strip libraries
#
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL

#
# Platform specific setup
#
#############################
AC_CANONICAL_HOST
WCL_PLATFORM_SETUP

#
# Checks for typedefs, structures, and compiler characteristics.
#
#############################
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

#
# Checks for library functions.
#
##############################
AC_FUNC_MALLOC
AC_CHECK_FUNCS([memset])


#
# Configure options
#
#####################################


# LEVEL 1 - No dependencies
enable_maths="yes";
enable_geometry="yes";
enable_gestures="yes";

# LEVEL 2 - Platform Specific IO
enable_serial="yes"
enable_parallel="yes"
enable_bluetooth="yes"
enable_network="yes"

# LEVEL 3 - Cameras
enable_camera_1394="yes"
enable_camera_uvc="yes"
enable_camera_ptgrey="yes"
enable_camera_virtual="yes"

# LEVEL 4 - Modules with internal dependencies
enable_tracking_artoolkitplus="yes"
enable_tracking_lazysusan="yes"
enable_tracking_polhemus="yes"
enable_tracking_vicon="yes"
enable_wiimote="yes"


# LEVEL 5 - Other stuff
enable_x11="yes"
enable_parsers="yes"
enable_video="yes"
enable_structuredlight="yes"
enable_projectorcontrol="yes"

#
# LEVEL 5 - Only built examples when asked
#
AC_ARG_ENABLE(examples, AC_HELP_STRING([--enable-examples], [Enable Relevant Examples for select options]), , )


#
# LEVEL 1 CHECKS
#

# There are none!

#
# LEVEL 2 CHECKS
#


# Parallel port only works on Linux
if test "x$platform_linux" != "xyes"; then
	AC_MSG_WARN([Cannot build Parallel support, because we are not on Linux])
	ERRORS+="Cannot build Parallel support, because we are not on Linux\n"
	enable_parallel="no"
fi


# Bluetooth only works on Linux at the moment
PKG_CHECK_MODULES(BLUETOOTH, bluez,  
				 [ 
				  PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $BLUETOOTH_LIBS"
				  PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $BLUETOOTH_CFLAGS"
				  ]
				 ,
				 [
				 AC_MSG_WARN([Could not find bluetooth libraries, bluetooth support disabled])
				 enable_bluetooth="no"
				 ERRORS+="Bluez library not found on the system, bluetooth support disabled\n"
				 ]
				 )

#
# LEVEL 3 CHECKS
#

# UVC Cameras only work on Linux..
if test "x$platform_linux" != "xyes"; then
	enable_camera_uvc="no"
	AC_MSG_WARN([Cannot build UVC Camera support, because we are not on Linux])
	ERRORS+="Cannot build UVC Camera support, because we are not on Linux\n"
fi

#libdc cameras..
if test "x$platform_linux" = "xyes"; then
	PKG_CHECK_MODULES(LIBRAW1394, libraw1394 >= 1.0.0,,
					  [ AC_MSG_WARN([libraw1394 not found, cannot build firewire camera support])
					    enable_camera_1394="no"
						ERRORS+="libraw1394 not found, cannot build firewire camera support\n"
					  ])

	PKG_CHECK_MODULES(LIBDC1394, libdc1394-2 >= 2.0.2,,
					  [ AC_MSG_WARN([libdc1394 not found, cannot build firewire camera support])
					    enable_camera_1394="no"
						ERRORS+="libdc1394 not found, cannot build firewire camera support\n"
					  ])
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBRAW1394_LIBS $LIBDC1394_LIBS"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBRAW1394_CFLAGS"
elif test "x$platform_osx" = "xyes"; then
	PKG_CHECK_MODULES(LIBDC1394, libdc1394-2 >= 2.0.2,,
					  [ AC_MSG_WARN([libdc1394 not found, cannot build firewire camera support])
					    enable_camera_1394="no"
						ERRORS+="libdc1394 not found, cannot build firewire camera support\n"
					  ])
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBDC1394_LIBS '-framework Carbon' '-framework QuickTime' '-framework AppKit' '-framework IOKit' '-framework Foundation' -lobjc"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBDC1394_CFLAGS"
else
	AC_MSG_WARN([Firewire Camera Support Is Not Available on your platform])
	ERRORS+="Firewire Camera Support Is Not Available on your platform\n"
	enable_camera_1394="no"
fi

# Point Grey needs their stupid lib
AC_CHECK_HEADERS([flycapture/FlyCapture2.h],
				 PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS -lflycapture"
				 ,
				 [
				  AC_MSG_WARN([Point Grey Camera support requested but libflycapture2-dev is not installed])
				  enable_camera_ptgrey="no"
				  ERRORS+="Point Grey Camera support requested but libflycapture2-dev is not installed\n"
				  ]
				 )

#
# Auto turn on the common camera support if any camera option is enabled
#
if test "x$enable_camera_uvc" = "xyes" || \
   test "x$enable_camera_1394" = "xyes" ||
   test "x$enable_camera_ptgrey" = "xyes" ||
   test "x$enable_camera_virtual" = "xyes"; then
	enable_camera="yes";
fi


#
# LEVEL 4 CHECKS
#

# artoolkitplus
AC_CHECK_HEADERS([ARToolKitPlus/ARToolKitPlus.h],
	[PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS -lARToolkitPlus"],
				 [
	     AC_MSG_WARN([You Need to Install ARToolKitPlus. Under ubuntu add
			deb http://ppa.launchpad.net/michael-the-drummer/wcl/ubuntu lucid main
			to your sources and to a apt-get update; apt-get install artoolkitplus-dev])
	     ERRORS+="You Need to Install ARToolKitPlus. Under ubuntu add
			deb http://ppa.launchpad.net/michael-the-drummer/wcl/ubuntu lucid main
			to your sources and to a apt-get update; apt-get install artoolkitplus-dev\n"
			enable_tracking_artoolkitplus="no"
			]
	    )


# VICON needs nework
if test "x$enable_network" = "xno"; then
	echo "*** Vicon Module Cannot be built, because network support was disabled ***";
	ERRORS+="Vicon Module Cannot be built, because network support was disabled\n"
	enable_tracking_vicon="no"
fi

# Lazy Susan needs serial
if test "x$enable_serial" = "xno"; then
	echo "*** Lazy Susan Module Cannot be built, because serial support was disabled ***";
	ERRORS+="Lasy SusanModule Cannot be built, because serial support was disabled\n"
	enable_tracking_lazysusan="no"
fi

if test "x$enable_serial" = "xno"; then
	echo "*** Polhemus module cannot be built, because serial support was disabled ***";
	ERRORS+="Polhemus Module Cannot be built, because serial support was disabled\n"
	enable_tracking_polhemus="no"
fi


if test "x$enable_bluetooth" = "xno"; then
	echo "*** Wiimote module cannot be built, because bluetooth support was disabled ***";
	enable_wiimote="no"
	ERRORS+="Wiimote Module Cannot be built, because bluetooth support was disabled\n"
else
	PKG_CHECK_EXISTS(cwiid, 
					 [PKG_CHECK_MODULES(CWIID, cwiid)],
					 [AC_CHECK_HEADERS(cwiid.h,

					  CWIID_LIBS="-lcwiid -lbluetooth", 
					  [
					   AC_MSG_WARN([You need to install libcwiid for wii support])
					   ERRORS+="Wiimote Module Cannot be built, because libcwiid could not be found\n"
					   enable_wiimote="no"
					   ]
					  )
					 ]
					 )
    PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $CWIID_LIBS"
    PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $CWIID_CFLAGS"
fi




#
# LEVEL 5 Checks
#

# Projector Control support
if test "x$enable_network" = "xno"; then
	echo "*** Projector Control cannot be built, because network support was disabled ***";
	ERRORS+="Projector Control Module Cannot be built, because network support was disabled\n"
	enable_projectorcontrol="no"
fi
# X11 Support
if test "x$platform_linux" = "xyes"; then
	PKG_CHECK_MODULES(X11, x11 xext,,
					  [
					   AC_MSG_WARN([X11 and XEXT libraries not found, not building X11 support])
					   enable_x11="no"
					   ERRORS+="X11 and XEXT libraries not found, not building X11 support\n"
					   ]
					  )
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $X11_LIBS"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $X11_CFLAGS"
else
	ERRORS+="X11 support only compiled on Linux.\n"
	enable_x11="no"
fi

# Parsers...
AC_PROG_YACC
AC_PROG_LEX
if test "$LEX" = ":"; then
	AC_MSG_WARN([Could not find lex. (F)Lex and yacc(bison) must be intalled to build parsers])
	ERRORS+="Could not find lex. (F)Lex and yacc(bison) must be intalled to build parsers\n"
	enable_parsers="no"
fi

# add the path belonging to the lexer to the include flags. This is required so
# the correct version of FlexLexer.h is picked up when there is more than one
# lexer on the system
CMD=`which $LEX`	           #ie: flex -> /usr/local/bin/flex
DIRNAME=`dirname $CMD`             #ie: /usr/local/bin/flex -> /usr/local/bin
DIRNAME=`dirname $DIRNAME`         #ie: /usr/local/bin -> /usr/local
if test -e "$DIRNAME/include/FlexLexer.h" ; then
	CXXFLAGS="$CXXFLAGS -I$DIRNAME/include"         #ie: /usr/local -> -I/usr/local/include
elif test -e "$DIRNAME/include/$LEX/FlexLexer.h" ; then
	CXXFLAGS="$CXXFLAGS -I$DIRNAME/include/$LEX"    #ie: /usr/local -> -I/usr/local/include/$LEX
else
	AC_MSG_WARN([Could not find c++ Lexer Files, (F)Lex must be installed and FlexLexer.h must exist])
	ERRORS+="Could not find c++ Lexer Files, (F)Lex must be installed and FlexLexer.h must exist\n"
	enable_parser="no"
fi

# Video (de/en)coding
PKG_CHECK_MODULES(LIBAVCODEC,libavcodec,
				  [ 
				   PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBAVCODEC_LIBS"
				   PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBAVCODEC_CFLAGS"
				   ]
				  ,
				  [
				   AC_MSG_WARN([Could not find libavcodec, cannot build video support])
				   ERRORS+="Could not find libavcodec, cannot build video support\n"
				   enable_video="no"
				   ]
				  );
PKG_CHECK_MODULES(LIBAVFORMAT,libavformat,
				  [
				  PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBAVFORMAT_LIBS"
				  PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBAVFORMAT_CFLAGS"
				  ]
				  ,
				  [
				   AC_MSG_WARN([Could not find libavformat, cannot build video support])
				   ERRORS+="Could not find libavformat, cannot build video support\n"
				   enable_video="no"
				   ]
				  );

PKG_CHECK_MODULES(LIBSWSCALE,libswscale,
				  [
				  PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBSWSCALE_LIBS"
				  PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBSWSCALE_CFLAGS"
				  ]
				  ,
				  [
				   AC_MSG_WARN([Could not find libswscale, cannot build video support])
				   ERRORS+="Could not find libswscale, cannot build video support\n"
				   enable_video="no"
				   ]
				  );

if test "x$enable_video" = "xyes"; then
	AC_DEFINE(ENABLE_VIDEO, 1, [Enable VideoDecoding/Encoding Support])
	CXXFLAGS="$CXXFLAGS -D__STDC_CONSTANT_MACROS"
fi
	





# 
# If examples are enabled we need to check for other options
#
EXAMPLE_LIBS=
EXAMPLE_INCLUDES=

if test "x$enable_examples" = "xyes" ; then
	if test "x$enable_tracker_artoolkitplus" = "xyes" ||
	   test "x$enable_video" = "xyes" ||
	   test "x$enable_camera" = "xyes"; then
	        PKG_CHECK_MODULES(GL,gl glu)
		EXAMPLE_LIBS="$GL_LIBS"
		EXAMPLE_INCLUDES="$GL_CFLAGS"

		# These also need glut which isn't pkg-config supported
		# XXX Really need a test for glut -benjsc 20100802
		EXAMPLE_LIBS="$EXAMPLE_LIBS -lglut"

		# Many camera examples require the virtual camera so we enable that here as well
		if test "x$enable_camera" = "xyes"; then
			enable_camera_virtual="yes"
		fi
	fi
	if test "x$enable_gestures" = "xyes" ; then
		PKG_CHECK_MODULES(QT, QtGui);
		EXAMPLE_LIBS="$EXAMPLE_LIBS $QT_LIBS"
		EXAMPLE_INCLUDES="$EXAMPLE_INCLUDES $QT_CFLAGS"

	fi
fi


AC_DEFINE([TOL], [0.00001f], [tolerance for comparing floating point numbers])
if test "x$enable_camera_uvc" = "xyes" ; then
AC_DEFINE(ENABLE_CAMERA_UVC, 1, [Enable UVC Camera Camera Support])
fi
if test "x$enable_camera_1394" = "xyes" ; then
AC_DEFINE(ENABLE_CAMERA_DC1394, 1, [Enable IEEE1394 Camera Support])
fi
if test "x$enable_camera_ptgrey" = "xyes" ; then
AC_DEFINE(ENABLE_CAMERA_PTGREY, 1, [Enable PTGrey Camera Support (Via libflycapture2)])
fi
if test "x$enable_camera_virtual" = "xyes" ; then
AC_DEFINE(ENABLE_CAMERA_VIRTUAL, 1, [Enable Virtual Camera Support])
fi

LDFLAGS="$PKGCONFIG_OTHERLIBS $LDFLAGS"
CXXFLAGS="$PKGCONFIG_OTHERINCLUDES $CXXFLAGS"

#
# Tell automake to substitute the values for 
# package config

AC_SUBST(PKGCONFIG_OTHERLIBS)
AC_SUBST(PKGCONFIG_OTHERINCLUDES)
AC_SUBST(PKGCONFIG_LIBDIR)
AC_SUBST(EXAMPLE_LIBS)
AC_SUBST(EXAMPLE_INCLUDES)


#
# Automake Substitution Variables
#

AM_CONDITIONAL(ENABLE_NETWORK, test "x$enable_network" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA, test "x$enable_camera" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA_VIRTUAL, test "x$enable_camera_virtual" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA_1394, test "x$enable_camera_1394" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA_PTGREY, test "x$enable_camera_ptgrey" = "xyes")
AM_CONDITIONAL(ENABLE_CAMERA_UVC, test "x$enable_camera_uvc" = "xyes")
AM_CONDITIONAL(ENABLE_GESTURES, test "x$enable_gestures" = "xyes")

AM_CONDITIONAL(ENABLE_SERIAL, test "x$enable_serial" = "xyes")
AM_CONDITIONAL(ENABLE_PARALLEL, test "x$enable_parallel" = "xyes")
AM_CONDITIONAL(ENABLE_BLUETOOTH, test "x$enable_bluetooth" = "xyes")

AM_CONDITIONAL(ENABLE_TRACKING_LAZYSUSAN, test "x$enable_tracking_lazysusan" = "xyes")
AM_CONDITIONAL(ENABLE_TRACKING_POLHEMUS, test "x$enable_tracking_polhemus" = "xyes")
AM_CONDITIONAL(ENABLE_TRACKING_VICON, test "x$enable_tracking_vicon" = "xyes")


AM_CONDITIONAL(ENABLE_GEOMETRY, test "x$enable_geometry" = "xyes")
AM_CONDITIONAL(ENABLE_X11, test "x$enable_x11" = "xyes")
AM_CONDITIONAL(ENABLE_PARSERS, test "x$enable_parsers" = "xyes")
AM_CONDITIONAL(ENABLE_TRACKING_ARTOOLKITPLUS, test "x$enable_tracking_artoolkitplus" = "xyes")
AM_CONDITIONAL(ENABLE_VIDEO, test "x$enable_video" = "xyes")
AM_CONDITIONAL(ENABLE_WIIMOTE, test "x$enable_wiimote" = "xyes")
AM_CONDITIONAL(ENABLE_EXAMPLES, test "x$enable_examples" = "xyes")
AM_CONDITIONAL(ENABLE_STRUCTUREDLIGHT, test "x$enable_structuredlight" = "xyes")

AM_CONDITIONAL(ENABLE_PROJECTORCONTROL, test "x$enable_projectorcontrol" = "xyes")
#
# Files to create
#
##############################
AC_CONFIG_FILES([Makefile
				 src/Makefile
				 src/wcl/Makefile
				 examples/Makefile
				 examples/artoolkitplus/Makefile
				 examples/bluetooth/Makefile
				 examples/camera/Makefile
				 examples/graycode/Makefile
				 examples/gestures/Makefile
				 examples/lazysusan/Makefile
				 examples/network/Makefile
				 examples/parallel/Makefile
				 examples/parsers/Makefile
				 examples/polhemus/Makefile
				 examples/serial/Makefile
				 examples/vicon/Makefile
				 examples/video/Makefile
				 examples/wiimote/Makefile
				 examples/projectors/Makefile 
                 libwcl.pc
				 ])

#
# Build the configure file
#
###########################
AC_OUTPUT

#
# Indicate what will be built into libwcl, 
# Crash out if nothing is defined
#
###############################
echo
echo
echo "-------------------------------------------------"
echo "libwcl Configuration Summary "
echo "-------------------------------------------------"
echo "Base Functionality:" 
echo "   Maths Support              : yes"
echo "   Geometry classes           : ${enable_geometry:-no}"
echo "   Gesture recognition        : ${enable_gestures:-no}"
echo "Base IO Support:" 
echo "   Bluetooth Support          : ${enable_bluetooth:-no}"
echo "   Parallel Support           : ${enable_parallel:-no}"
echo "   Serial Support             : ${enable_serial:-no}"
echo "   UDP/TCP Support            : ${enable_network:-no}"
echo "Camera Support:"
echo "   1394 (Firewire) Camera     : ${enable_camera_1394:-no}"
echo "   PTGrey Camera support      : ${enable_camera_ptgrey:-no}"
echo "   UVC Camera support         : ${enable_camera_uvc:-no}"
echo "   Virtual Camera Support     : ${enable_camera_virtual:-no}"
echo "Tracking Support:" 
echo "   ARToolkitPlus Support      : ${enable_tracking_artoolkitplus:-no}"
echo "   Lazy Susan Support         : ${enable_tracking_lazysusan:-no}"
echo "   Polhemus Support           : ${enable_tracking_polhemus:-no}"
echo "   Vicon MoCap Support        : ${enable_tracking_vicon:-no}"
echo "   Wiimote Support            : ${enable_wiimote:-no}"
echo "And the rest:"
echo "   Parser Support             : ${enable_parsers:-no}"
echo "   Video Encoder/Decoder      : ${enable_video:-no}"
echo "   Structured Light Support   : ${enable_structuredlight:-no}"
echo "   X11 Support                : ${enable_x11:-no}"
echo "   Projector control support  : ${enable_projectorcontrol:-no}"
echo "   Examples Compiled          : ${enable_examples:-no}"
echo "-------------------------------------------------"

echo "$ERRORS"
