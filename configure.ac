# 
# $Id$
#
# This configure build file indicates what libraries and includes
# exist on the system and generates the required code for to
# be able to correctly configure the libwcl library
#
# A good reference for macros for this config file is at:
# http://sourceware.org/autobook/autobook/autobook_283.html

AC_PREREQ(2.50)

# Initialise the system
AC_INIT(wcl, 0.0.0, wcl@wcl.levels.unisa.edu.au)

# Define where autogenerated build files such as 'missing'
# should be located. This is also the location of any additional
# m4 macros that are required
AC_CONFIG_AUX_DIR(cfg)

#
# Init Automake subsystem
#
AM_INIT_AUTOMAKE(wcl,0.0.0)
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])

AM_CONFIG_HEADER(config.h)

# Init LIBToolize
AC_CONFIG_MACRO_DIR([cfg])
LT_INIT()

#
# Setup Options
#
#####################################

# Indicate this is a release build and that 
# dependancies for changes between Makefile.am and Makefile.in
# should not be checked. This makes compiling faster. If you are working
# on the library, run: ./configure --enable-maintainer-mode to enable the dependancies
AM_MAINTAINER_MODE

#
# Configure options
#
#####################################

#
# TCP/UDP Networking
#    When enabled: enable_network is defined to 'yes' or 'no'
#
AC_ARG_ENABLE(network, AC_HELP_STRING([--enable-network], [Enable basic TCP/UDP C++ Code]), , enable_network="no")

#
# Serial Port / RS232 Code
# 	When enabled: enable_serial is defined to 'yes' or 'no'
#
#AC_ARG_ENABLE(serial, AC_HELP_STRING([--enable-serial], [Enable RS232 Serial Code]), , enable_serial="no")

#
# Firewire/1394 Video Support 
# 	When enabled: enable_video_1394 is defined to 'yes' or 'no'
#
AC_ARG_ENABLE(video, AC_HELP_STRING([--enable-video], [Enable 1394/Firewire Video Support]), enable_video_1394="yes" , enable_video_1394="no")

#
# UVC Video Support 
#
AC_ARG_ENABLE(video-uvc, AC_HELP_STRING([--enable-video-uvc], [Enable UVC Video Support]), enable_video_uvc="yes" , enable_video_uvc="no")


#
# Gesture recognition support
#
AC_ARG_ENABLE(gestures, AC_HELP_STRING([--enable-gestures], [Enable Gesture Recognition Support]), enable_gestures="yes" , enable_gestures="no")

#
# Support for Vicon system
#
AC_ARG_ENABLE(vicon, AC_HELP_STRING([--enable-vicon], [Enable Vicon System support]), enable_vicon="yes" , enable_vicon="no")

#
# Support for Raw ports
#
AC_ARG_ENABLE(rawports, AC_HELP_STRING([--enable-rawports], [Enable Raw ports support - serial/parallel]), enable_rawports="yes" , enable_rawports="no")

# Support for X11
#
AC_ARG_ENABLE(x11, AC_HELP_STRING([--enable-x11], [Enable X11 Support]), enable_x11="yes" , enable_x11="no")

# 
#  Enable All Options
# 	This simply enables each option
AC_ARG_ENABLE(all, AC_HELP_STRING([--enable-all], [Enable Support For Everything]), 
	     enable_network="yes";
	     enable_video_1394="yes";
	     enable_rawports="yes" ;
	     enable_video_uvc="yes";
		 enable_gestures="yes";
		 enable_vicon="yes";
		 enable_x11="yes"; )

#
#  Check to see if anything is configured
#
AC_MSG_CHECKING([Checking we need to build something]);
if test "x$enable_network" = "xno" && \
   test "x$enable_video_1394" = "xno" && \
   test "x$enable_vicon" = "xno" && \
   test "x$enable_gestures" = "xno" && \
   test "x$enable_rawports" = "xno" && \ 
   test "x$enable_video_uvc" = "xno" && \
   test "x$enable_x11" = "xno" ; then
   AC_MSG_RESULT([nup])
   AC_MSG_ERROR([You must select something to build!, use --help for details])
fi
AC_MSG_RESULT([yes])


#
# Automatically turn on network if we are building the vicon module.
#
if test "x$enable_vicon" = "xyes"; then
	enable_network="yes";
	echo "*** Vicon Module selected, automatically enabling Network ***";
fi


#
# Automake Substitution Variables
#

AM_CONDITIONAL(ENABLE_NETWORK, test "x$enable_network" = "xyes")
AM_CONDITIONAL(ENABLE_SERIAL, test "x$enable_serial" = "xyes")
AM_CONDITIONAL(ENABLE_VIDEO_1394, test "x$enable_video_1394" = "xyes")
AM_CONDITIONAL(ENABLE_VIDEO_UVC, test "x$enable_video_uvc" = "xyes")
AM_CONDITIONAL(ENABLE_GESTURES, test "x$enable_gestures" = "xyes")
AM_CONDITIONAL(ENABLE_VICON, test "x$enable_vicon" = "xyes")
AM_CONDITIONAL(ENABLE_RAWPORTS, test "x$enable_rawports" = "xyes")
AM_CONDITIONAL(ENABLE_X11, test "x$enable_x11" = "xyes")


#
# System Checks
#
#######################################

#
# Check which system we are on
#  	This sets: host variable

# Aaron put this in as a quick hack to test something, shouldn't really be here though
_AM_DEPENDENCIES([OBJC])


#
# The vicon system ignorantly assumes that data is in Intel format (little endian)
# meaning we can't use network byte order. Therefore, we treat things differently
# if we're on PowerPC
#
AC_C_BIGENDIAN


#
# Add required hacks to make automake work
# (defined in cfg/other.m4)
WCL_HACKS
WCL_FRIDGE_CHECK

#
# Check for programs
#
#######################################

AC_CHECK_PROG(SED,sed,sed,AC_MSG_ERROR([You Must install sed]))

#
# Test for Package Config
# We need this for a lot of packages
#
AC_PATH_PROG(PKG_CONFIG, pkg-config)
if test "x$PKG_CONFIG" = "x"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi

AC_MSG_CHECKING([for pkg-config library dir])
PKGCONFIG_LIBDIR="`echo $PKG_CONFIG | $SED -e 's~/bin/pkg-config$~~'`/lib/pkgconfig"
AC_MSG_RESULT($PKGCONFIG_LIBDIR)

#
# Need the C++ Compiler, Installer and ranlib to strip libraries
#
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL

#
# Platform specific setup
#
#############################
AC_CANONICAL_HOST
WCL_PLATFORM_SETUP

#
# Check for libraries
#
#############################
if test "x$enable_video_1394" = "xyes"; then
    if test "x$platform_linux" = "xyes"; then
	PKG_CHECK_MODULES(LIBRAW1394, libraw1394 >= 1.0.0)
	PKG_CHECK_MODULES(LIBDC1394, libdc1394-2 >= 2.0.2)
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBRAW1394_LIBS $LIBDC1394_LIBS"
	PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $LIBRAW1394_CFLAGS"
    elif test "x$platform_osx" = "xyes"; then
	PKG_CHECK_MODULES(LIBDC1394, libdc1394-2 >= 2.0.2)
	PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $LIBDC1394_LIBS '-framework Carbon' '-framework QuickTime' '-framework AppKit' '-framework IOKit' '-framework Foundation' -lobjc"
    else
	AC_MSG_ERROR([Video Support Is Not Available on your platform])
    fi
fi

if test "x$enable_x11" = "xyes"; then
    PKG_CHECK_MODULES(X11, x11 )
    PKGCONFIG_OTHERLIBS="$PKGCONFIG_OTHERLIBS $X11_LIBS"
    PKGCONFIG_OTHERINCLUDES="$PKGCONFIG_OTHERINCLUDES $X11_CFLAGS"
fi


#
# Checks for typedefs, structures, and compiler characteristics.
#
#############################
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

#
# Checks for library functions.
#
##############################
AC_FUNC_MALLOC
AC_CHECK_FUNCS([memset])

#
# Indicate what will be built into libwcl, 
# Crash out if nothing is defined
#
###############################
echo "-------------------------------"
echo "libwcl Configuration Summary "
echo "-------------------------------"
echo "Rawports Support(com/lpt): $enable_rawports"
echo "Microsoft (msvc) support : $enable_msvc"
echo "network support          : $enable_network"
echo "1394 (Firewire) Video    : $enable_video_1394"
echo "Gesture recognition      : $enable_gestures"
echo "Vicon MoCap Support      : $enable_vicon"
echo "UVC Video support        : $enable_video_uvc"
echo "X11 Support              : $enable_x11"
echo "Maths Support            : Enabled (default)"
echo "-------------------------------"

#
# Tell automake to substitute the values for 
# package config

AC_SUBST(PKGCONFIG_OTHERLIBS)
AC_SUBST(PKGCONFIG_OTHERINCLUDES)
AC_SUBST(PKGCONFIG_LIBDIR)

#
# Files to create
#
##############################
AC_CONFIG_FILES([Makefile
		 src/Makefile
                 src/wcl/Makefile
		 libwcl.pc
		])

#
# Build the configure file
#
###########################
AC_OUTPUT
